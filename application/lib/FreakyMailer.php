<?phpnamespace application\lib;use application\lib\phpmailer\Exception;use application\lib\phpmailer\PHPMailer;use application\config\Config;class FreakyMailer extends PHPMailer{    public function __construct()    {        parent::__construct(true);        $this->SMTPDebug = 2;        $this->isSMTP();        $this->SMTPAuth = true;        $this->Host = 'smtp.gmail.com';        $this->Username = Config::MAILER_USERNAME;        $this->Password = Config::MAILER_PASSWORD;        $this->SMTPSecure = 'tls';        $this->Port = 587;        try        {            $this->setFrom(Config::MAILER_FROM_EMAIL, Config::MAILER_FROM_NAME);        }        catch (Exception $ex)        {            $this->setError($ex->errorMessage());        }    }    public function send_contact_mailto($recipients)    {        if (!$this->message_validation())        {            return false;        }        $name = htmlspecialchars($_POST['name']);        $email_address = htmlspecialchars($_POST['email']);        $phone = htmlspecialchars($_POST['phone']);        $message = htmlspecialchars($_POST['message']);        $headers = "From: pierredunnblog@gmail.com\r\n";        $subject = "Blog Contact Form:  $name";        $body =            "You have received a new message from your website contact form. \r\n".            "Here are the details: \r\n".            "Name: $name\r\n".            "Email: $email_address\r\n".            "Phone: $phone\r\n".            "Message: \r\n$message";        foreach ($recipients as $name => $email)        {            if (!mail($email, $subject, $body, $headers))            {                $this->setError("Send Error");                return false;            }        }        return true;    }    public function send_registration_mailto($token)    {        $email = $_POST['email'];        $subject = 'Регистрация на блоге PierreDunn';        $body    =            'Для подтверждения регистрации, перейдите по ссылке: '.$_SERVER['REQUEST_SCHEME'].'://'.$_SERVER['HTTP_HOST'].'/account/confirm/'.$token;        $headers = "From: pierredunnblog@gmail.com\r\n";        if (!mail($email, $subject, $body, $headers))        {            $this->setError("Send Error");            return false;        }        return true;    }    public function send_recovery_mailto($password)    {        $email = $_POST['email'];        $subject = 'Забыли пароль на блоге PierreDunn';        $body    = 'Ваш новый пароль: '. $password;        $headers = "From: pierredunnblog@gmail.com\r\n";        if (!mail($email, $subject, $body, $headers))        {            $this->setError("Send Error");            return false;        }        return true;    }    public function send_recovery_mail($password)    {        try        {            $email = $_POST['email'];            $this->clearAddresses();            $this->addAddress($email);            $this->isHTML(true);            $this->Subject = "Blog Password Recovery";            $this->Body    = 'Your new password: '. $password;            $this->AltBody = $this->Body;            return $this->send();        }        catch (Exception $ex)        {            $this->setError($ex->errorMessage());            return false;        }    }    public function send_contact_mail($recipients)    {        try        {            if (!$this->message_validation())            {                return false;            }            $name = htmlspecialchars($_POST['name']);            $email_address = htmlspecialchars($_POST['email']);            $phone = htmlspecialchars($_POST['phone']);            $message = htmlspecialchars($_POST['message']);            $this->clearAddresses();            foreach ($recipients as $name => $email)            {                $this->addAddress($email, $name);            }            $this->isHTML(true);            $this->Subject = "Blog Contact Form:  $name";            $this->Body    =                "You have received a new message from your website contact form. \r\n".                "Here are the details: \r\n".                "Name: $name\r\n".                "Email: $email_address\r\n".                "Phone: $phone\r\n".                "Message: \r\n$message";            $this->AltBody = $this->Body;            return $this->send();        }        catch (Exception $ex)        {            $this->setError($ex->errorMessage());            return false;        }    }    public function send_registration_mail($token)    {        try        {            $email = $_POST['email'];            $last_name = $_POST['last_name'];            $first_name = $_POST['first_name'];            $this->clearAddresses();            $this->addAddress($email, $last_name.' '.$first_name);            $this->isHTML(true);            $this->Subject = 'Регистрация на блоге PierreDunn';            $this->Body    =                'Для подтверждения регистрации, перейдите по ссылке: '.$_SERVER['REQUEST_SCHEME'].'://'.$_SERVER['HTTP_HOST'].'/account/confirm/'.$token;            $this->AltBody = $this->Body;            return $this->send();        }        catch (Exception $ex)        {            $this->setError($ex->errorMessage());            return false;        }    }    private function message_validation()    {        $name = htmlspecialchars($_POST['name']);        $email_address = htmlspecialchars($_POST['email']);        $message = htmlspecialchars($_POST['message']);        $name_len = iconv_strlen($name);        $message_len = iconv_strlen($message);        if ($name_len < Config::CONTACT_MIN_NAME_LENGTH or $name_len > Config::CONTACT_MAX_NAME_LENGTH)        {            $message = 'Имя должно содержать не менее '.Config::CONTACT_MIN_NAME_LENGTH.' и не более '.Config::CONTACT_MAX_NAME_LENGTH.' символов';            $this->setError($message);            return false;        }        if (!filter_var($email_address, FILTER_VALIDATE_EMAIL))        {            $message = 'E-Mail указан неверно';            $this->setError($message);            return false;        }        if ($message_len < Config::CONTACT_MIN_MESSAGE_LENGTH or $message_len > Config::CONTACT_MAX_MESSAGE_LENGTH)        {            $message = 'Сообщение должно содержать не менее '.Config::CONTACT_MIN_MESSAGE_LENGTH.' и не более '.Config::CONTACT_MAX_MESSAGE_LENGTH.' символов';            $this->setError($message);            return false;        }        return true;    }}